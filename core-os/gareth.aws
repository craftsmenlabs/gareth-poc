{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Gareth application stack",
  "Mappings": {
    "RegionMap": {
      "eu-central-1": {
        "AMI": "ami-02211b1f"
      },
      "ap-northeast-1": {
        "AMI": "ami-22d27b22"
      },
      "us-gov-west-1": {
        "AMI": "ami-e53a59c6"
      },
      "sa-east-1": {
        "AMI": "ami-45a62a58"
      },
      "ap-southeast-2": {
        "AMI": "ami-2b2e6911"
      },
      "ap-southeast-1": {
        "AMI": "ami-0ef1f15c"
      },
      "us-east-1": {
        "AMI": "ami-6b1cd400"
      },
      "us-west-2": {
        "AMI": "ami-f5a5a5c5"
      },
      "us-west-1": {
        "AMI": "ami-bf8477fb"
      },
      "eu-west-1": {
        "AMI": "ami-50f4b927"
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "Description": "EC2 HVM instance type (m3.medium, etc).",
      "Type": "String",
      "Default": "t2.micro",
      "ConstraintDescription": "Must be a valid EC2 HVM instance type."
    },
    "ClusterSize": {
      "Default": "3",
      "MinValue": "3",
      "MaxValue": "12",
      "Description": "Number of nodes in cluster (3-12).",
      "Type": "Number"
    },
    "DiscoveryURL": {
      "Description": "An unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new?size=<your cluster size>",
      "Type": "String"
    },
    "AdvertisedIPAddress": {
      "Description": "Use 'private' if your etcd cluster is within one region or 'public' if it spans regions or cloud providers.",
      "Default": "private",
      "AllowedValues": [
        "private",
        "public"
      ],
      "Type": "String"
    },
    "AllowSSHFrom": {
      "Description": "The net block (CIDR) that SSH is available to.",
      "Default": "0.0.0.0/0",
      "Type": "String"
    },
    "KeyPair": {
      "Description": "The name of an EC2 Key Pair to allow SSH access to the instance.",
      "Type": "String"
    },
    "DBRegistrationHost": {
      "Description": "The registration DB host name.",
      "Default": "registrations.cckbmh9oleif.eu-central-1.rds.amazonaws.com",
      "Type": "String"
    },
    "DBRegistrationDatabase": {
      "Description": "The registration DB database name.",
      "Default": "registrations",
      "Type": "String"
    },
    "DBRegistrationUsername": {
      "Description": "The registration DB username",
      "Type": "String"
    },
    "DBRegistrationPassword": {
      "Description": "The registration DB password",
      "Type": "String"
    }
  },
  "Resources": {
    "CoreOSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "CoreOS SecurityGroup",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AllowSSHFrom"
            }
          }
        ]
      }
    },
    "GarethDemoSiteSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Gareth demo site group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8888",
            "ToPort": "8888",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "GarethDslSiteSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Gareth dsl site group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "9999",
            "ToPort": "9999",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },"GarethDslDashboardSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Gareth dsl dashboard group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8765",
            "ToPort": "8765",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "GarethDemoSiteWebSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Gareth demo site web group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "Ingress4001": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {
          "Ref": "CoreOSSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "4001",
        "ToPort": "4001",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CoreOSSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "Ingress2379": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {
          "Ref": "CoreOSSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "2379",
        "ToPort": "2379",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CoreOSSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "Ingress2380": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupName": {
          "Ref": "CoreOSSecurityGroup"
        },
        "IpProtocol": "tcp",
        "FromPort": "2380",
        "ToPort": "2380",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CoreOSSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "GarethLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": "true",
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "CookieBasedPolicy",
            "CookieExpirationPeriod": "30"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "8888",
            "Protocol": "HTTP",
            "PolicyNames": [
              "CookieBasedPolicy"
            ]
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8888/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        },
        "SecurityGroups": [
          { "Fn::GetAtt" : [ "GarethDemoSiteWebSecurityGroup", "GroupId" ] }
        ]
      }
    },
    "GarethDslLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": "true",
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "CookieBasedPolicy",
            "CookieExpirationPeriod": "30"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "9999",
            "Protocol": "HTTP",
            "PolicyNames": [
              "CookieBasedPolicy"
            ]
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:9999/experiments",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        },
        "SecurityGroups": [
          { "Fn::GetAtt" : [ "GarethDemoSiteWebSecurityGroup", "GroupId" ] }
        ]
      }
    },
    "GarethDslDashboardLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone": "true",
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "CookieBasedPolicy",
            "CookieExpirationPeriod": "30"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "8765",
            "Protocol": "HTTP",
            "PolicyNames": [
              "CookieBasedPolicy"
            ]
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8765/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        },
        "SecurityGroups": [
          { "Fn::GetAtt" : [ "GarethDemoSiteWebSecurityGroup", "GroupId" ] }
        ]
      }
    },
    "CoreOSServerAutoScale": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LaunchConfigurationName": {
          "Ref": "CoreOSServerLaunchConfig"
        },
        "MinSize": "3",
        "MaxSize": "12",
        "LoadBalancerNames": [
          {
            "Ref": "GarethLoadBalancer"
          },
          {
            "Ref": "GarethDslLoadBalancer"
          },
          {
            "Ref": "GarethDslDashboardLoadBalancer"
          }

        ],
        "DesiredCapacity": {
          "Ref": "ClusterSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": true
          }
        ]
      },
      "UpdatePolicy" : {
        "AutoScalingScheduledAction" : {
          "IgnoreUnmodifiedGroupSizeProperties" : "true"
        },
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "2",
          "WaitOnResourceSignals" : "false",
          "PauseTime" : "PT10M"
        }
      }
    },
    "CoreOSServerLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPair"
        },
        "SecurityGroups": [
          {
            "Ref": "CoreOSSecurityGroup"
          },
          {
            "Ref": "GarethDemoSiteSecurityGroup"
          },
          {
            "Ref": "GarethDslSiteSecurityGroup"
          },
          {
            "Ref": "GarethDslDashboardSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config\n\n",
                "coreos:\n",
                "  etcd2:\n",
                "    discovery: https://discovery.etcd.io/859cf3d7da61d2010c84e19c62128e32\n",
                "\n",
                "    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001\n",
                "    initial-advertise-peer-urls: http://$private_ipv4:2380\n",
                "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
                "    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001\n",
                "  units:\n",
                "    - name: etcd2.service\n",
                "      command: restart\n",
                "    - name: fleet.service\n",
                "      command: start\n",
                "    - name: docker-website.service\n",
                "      command: start\n",
                "      content: |\n",
                "       [Unit]\n",
                "       Description=demo-site\n",
                "       After=docker.service\n",
                "       Requires=docker.service\n",
                "       [Service]\n",
                "       Environment=DB_PORT_3306_TCP_ADDR=",
                {
                  "Ref": "DBRegistrationHost"
                },
                "\n",
                "       Environment=DB_ENV_MYSQL_DATABASE=",
                {
                  "Ref": "DBRegistrationDatabase"
                },
                "\n",
                "       Environment=DB_ENV_MYSQL_USER=",
                {
                  "Ref": "DBRegistrationUsername"
                },
                "\n",
                "       Environment=DB_ENV_MYSQL_PASSWORD=",
                {
                  "Ref": "DBRegistrationPassword"
                },
                "\n",
                "       ExecStartPre=-/usr/bin/docker kill demo-site\n",
                "       ExecStartPre=-/usr/bin/docker rm demo-site\n",
                "       ExecStart=/usr/bin/docker run --rm --name demo-site --env=DB_PORT_3306_TCP_ADDR=${DB_PORT_3306_TCP_ADDR} --env=DB_ENV_MYSQL_DATABASE=${DB_ENV_MYSQL_DATABASE} --env=DB_ENV_MYSQL_USER=${DB_ENV_MYSQL_USER} --env=DB_ENV_MYSQL_PASSWORD=${DB_ENV_MYSQL_PASSWORD}  -p 8888:8888 craftsmenlabs/website\n",
                "       ExecStop=/usr/bin/docker kill demo-site\n",
                "       [X-Fleet]\n",
                "       X-Conflicts=docker-site@*.service",
                "\n",
                "    - name: docker-dsl.service\n",
                "      command: start\n",
                "      content: |\n",
                "       [Unit]\n",
                "       Description=dsl-site\n",
                "       After=docker-website.service\n",
                "       Requires=docker-website.service\n",
                "       [Service]\n",
                "       ExecStartPre=-/usr/bin/docker kill dsl-site\n",
                "       ExecStartPre=-/usr/bin/docker rm dsl-site\n",
                "       ExecStart=/usr/bin/docker run --rm --name dsl-site -p 9999:9999 craftsmenlabs/dsl\n",
                "       ExecStop=/usr/bin/docker kill dsl-site\n",
                "       [X-Fleet]\n",
                "       X-Conflicts=dsl-site@*.service",
                "\n",
                "    - name: docker-dsl-dashboard.service\n",
                "      command: start\n",
                "      content: |\n",
                "       [Unit]\n",
                "       Description=dsl-dashboard-site\n",
                "       After=docker-dsl.service\n",
                "       Requires=docker-dsl.service\n",
                "       [Service]\n",
                "       Environment=DSL_LB_URL=",
                { "Fn::GetAtt" : ["GarethDslLoadBalancer","CanonicalHostedZoneName"] },
                "       ExecStartPre=-/usr/bin/docker kill dsl-dashboard-site\n",
                "       ExecStartPre=-/usr/bin/docker rm dsl-dashboard-site\n",
                "       ExecStart=/usr/bin/docker run --rm --name dsl-dashboard-site --env=DASHBOARD_CONFIG=amazon.js --env=DSL_LB_URL=${DSL_LB_URL} -p 8765:8765 craftsmenlabs/dsldashboard\n",
                "       ExecStop=/usr/bin/docker kill dsl-dashboard-site\n",
                "       [X-Fleet]\n",
                "       X-Conflicts=dsl-dashboard-site@*.service"
              ]
            ]
          }
        }
      }
    }
  }
}